import * as FileSystem from "expo-file-system";
import { Alert, Platform } from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { BASE_URL } from "../constants/hosts";
import * as IntentLauncher from "expo-intent-launcher";
import * as Sharing from "expo-sharing";

const UMKD_FOLDER_KEY = "UMKD_FOLDER_URI";

const getOrRequestFolderUri = async (): Promise<string | null> => {
  try {
    const savedUri = await AsyncStorage.getItem(UMKD_FOLDER_KEY);
    if (savedUri) return savedUri;

    const permissions = await FileSystem.StorageAccessFramework.requestDirectoryPermissionsAsync();
    if (permissions.granted && permissions.directoryUri) {
      await AsyncStorage.setItem(UMKD_FOLDER_KEY, permissions.directoryUri);
      return permissions.directoryUri;
    } else {
      Alert.alert("–û—à–∏–±–∫–∞", "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.");
      return null;
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏:", err);
    Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ");
    return null;
  }
};

export const saveToFiles = async (
  fileName: string,
  studentId: string,
  subjectId: string,
  fileId: number,
  onProgress?: (progress: number) => void
): Promise<string | null> => {
  try {
    const folderUri = await getOrRequestFolderUri();
    if (!folderUri) return null;

    const url = `${BASE_URL}/umkd/download-file?studentId=${studentId}&subjectId=${subjectId}&fileId=${fileId}`;
    console.log("Downloading from:", url);

    // ‚¨áÔ∏è —Å–Ω–∞—á–∞–ª–∞ –∫–∞—á–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const tempPath = FileSystem.cacheDirectory + fileName;
    const downloadResumable = FileSystem.createDownloadResumable(
      url,
      tempPath,
      {},
      (downloadProgress) => {
        const progress =
          downloadProgress.totalBytesWritten /
          downloadProgress.totalBytesExpectedToWrite;

        if (onProgress) {
          onProgress(Math.max(0, Math.round(progress * 100)));
        }
      }
    );

    const res = await downloadResumable.downloadAsync();
    if (!res || res.status !== 200) {
      throw new Error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è");
    }

    // ‚¨ÜÔ∏è —á–∏—Ç–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ base64
    const base64Content = await FileSystem.readAsStringAsync(res.uri, {
      encoding: FileSystem.EncodingType.Base64,
    });

    // üìÇ —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ SAF
    const destUri = await FileSystem.StorageAccessFramework.createFileAsync(
      folderUri,
      fileName,
      "application/octet-stream"
    );

    // ‚úç –ø–∏—à–µ–º –≤ content:// —Ñ–∞–π–ª
    await FileSystem.writeAsStringAsync(destUri, base64Content, {
      encoding: FileSystem.EncodingType.Base64,
    });

    console.log("‚úÖ File saved to:", destUri);
    return destUri; // —Ç–µ–ø–µ—Ä—å —É –Ω–∞—Å content://
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", error);
    Alert.alert("–û—à–∏–±–∫–∞", error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª");
    return null;
  }
};



const ensureFileUri = async (uri: string): Promise<string> => {
  if (uri.startsWith("content://")) {
    return uri; // –≤—Å—ë –æ–∫
  }

  if (uri.startsWith("file://")) {
    // üìÇ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π SAF —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å content://
    const folderUri = await getOrRequestFolderUri();
    if (!folderUri) throw new Error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤");

    const fileName = uri.split("/").pop() || "file.pdf";
    const base64 = await FileSystem.readAsStringAsync(uri, {
      encoding: FileSystem.EncodingType.Base64,
    });

    const destUri = await FileSystem.StorageAccessFramework.createFileAsync(
      folderUri,
      fileName,
      "application/pdf"
    );

    await FileSystem.writeAsStringAsync(destUri, base64, {
      encoding: FileSystem.EncodingType.Base64,
    });

    return destUri; // —Ç–µ–ø–µ—Ä—å content://
  }

  throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URI: ${uri}`);
};


// üëâ ¬´–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª¬ª ‚Äî —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é, –≥–¥–µ —é–∑–µ—Ä –≤—ã–±–µ—Ä–µ—Ç Word / PDF viewer / –∏ —Ç.–¥.
export const openFile = async (uri: string) => {
  try {
    const safeUri = await ensureFileUri(uri); // —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ content://

    if (Platform.OS === "android") {
      await IntentLauncher.startActivityAsync("android.intent.action.VIEW", {
        data: safeUri,
        flags: 1,
      });
    } else {
      if (await Sharing.isAvailableAsync()) {
        await Sharing.shareAsync(safeUri);
      } else {
        Alert.alert("iOS", "–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
      }
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞:", err);
    Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª");
  }
};



// üëâ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–π–ª–æ–º¬ª ‚Äî —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram, WhatsApp –∏ —Ç.–¥.
export const shareFile = async (uri: string) => {
  try {
    let fileUri = uri;

    // Expo Sharing –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ file://
    if (uri.startsWith("content://")) {
      const fileName = uri.split("/").pop() || "file";
      const tempPath = FileSystem.cacheDirectory + fileName;

      // –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ SAF ‚Üí cache
      await FileSystem.copyAsync({ from: uri, to: tempPath });
      fileUri = tempPath;
    }

    if (await Sharing.isAvailableAsync()) {
      await Sharing.shareAsync(fileUri, { dialogTitle: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–π–ª–æ–º" });
    } else {
      Alert.alert("–û—à–∏–±–∫–∞", "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–π–ª–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∞—Ä–∏–Ω–≥–µ:", err);
    Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–π–ª–æ–º");
  }
};
