import * as FileSystem from "expo-file-system";
import { Alert, Platform } from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { BASE_URL } from "../constants/hosts";
import * as IntentLauncher from "expo-intent-launcher";
import * as Sharing from "expo-sharing";

const UMKD_FOLDER_KEY = "UMKD_FOLDER_URI";

const getOrRequestFolderUri = async (): Promise<string | null> => {
  try {
    const savedUri = await AsyncStorage.getItem(UMKD_FOLDER_KEY);
    if (savedUri) return savedUri;

    const permissions = await FileSystem.StorageAccessFramework.requestDirectoryPermissionsAsync();
    if (permissions.granted && permissions.directoryUri) {
      await AsyncStorage.setItem(UMKD_FOLDER_KEY, permissions.directoryUri);
      return permissions.directoryUri;
    } else {
      Alert.alert("–û—à–∏–±–∫–∞", "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.");
      return null;
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏:", err);
    Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ");
    return null;
  }
};

export const saveToFiles = async (
  fileName: string,
  studentId: string,
  subjectId: string,
  fileId: number
): Promise<string | null> => {
  try {
    const url = `${BASE_URL}/umkd/download-file?studentId=${studentId}&subjectId=${subjectId}&fileId=${fileId}`;
    console.log("Downloading from:", url);

    const tempPath = FileSystem.cacheDirectory + fileName;
    const downloadResult = await FileSystem.downloadAsync(url, tempPath);

    if (downloadResult.status !== 200) {
      throw new Error(`HTTP error: ${downloadResult.status}`);
    }
    console.log("File downloaded to:", downloadResult.uri);

    if (Platform.OS === "android") {
      const folderUri = await getOrRequestFolderUri();
      if (!folderUri) return null;

      try {
        // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
        const files = await FileSystem.StorageAccessFramework.readDirectoryAsync(folderUri);

        // üîπ –ò—â–µ–º —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º
        const existingFile = files.find(f => decodeURIComponent(f).endsWith(fileName));
        if (existingFile) {
          console.log("Deleting existing file:", existingFile);
          await FileSystem.StorageAccessFramework.deleteAsync(existingFile);
        }

        // üîπ –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ
        const destUri = await FileSystem.StorageAccessFramework.createFileAsync(
          folderUri,
          fileName,
          "application/octet-stream"
        );

        // üîπ –ß–∏—Ç–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –ø–∏—à–µ–º
        const fileContent = await FileSystem.readAsStringAsync(downloadResult.uri, {
          encoding: FileSystem.EncodingType.Base64,
        });

        await FileSystem.writeAsStringAsync(destUri, fileContent, {
          encoding: FileSystem.EncodingType.Base64,
        });

        console.log("File saved to:", destUri);
        return destUri;

      } catch (safError) {
        console.error("SAF error:", safError);
        return downloadResult.uri; // fallback: –≤–µ—Ä–Ω—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      }
    } else {
      // iOS ‚Üí documentDirectory
      const destUri = FileSystem.documentDirectory + fileName;

      // –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å ‚Üí —É–¥–∞–ª—è–µ–º
      const fileInfo = await FileSystem.getInfoAsync(destUri);
      if (fileInfo.exists) {
        console.log("Deleting existing iOS file:", destUri);
        await FileSystem.deleteAsync(destUri, { idempotent: true });
      }

      await FileSystem.moveAsync({
        from: downloadResult.uri,
        to: destUri,
      });

      console.log("File moved to:", destUri);
      return destUri;
    }
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", error);
    Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: " + error.message);
    return null;
  }
};

const ensureFileUri = async (uri: string): Promise<string> => {
  if (uri.startsWith("file://")) return uri;

  if (uri.startsWith("content://")) {
    const fileName = uri.split("/").pop() || "file";
    const localUri = FileSystem.cacheDirectory + fileName;
    await FileSystem.copyAsync({ from: uri, to: localUri });
    return localUri;
  }

  throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URI: ${uri}`);
};

// üëâ ¬´–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª¬ª ‚Äî —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é, –≥–¥–µ —é–∑–µ—Ä –≤—ã–±–µ—Ä–µ—Ç Word / PDF viewer / –∏ —Ç.–¥.
export const openFile = async (uri: string) => {
  try {
    if (Platform.OS === "android") {
      // SAF URI –∏–ª–∏ file:// ‚Üí –æ–±–∞ –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞—é—Ç—Å—è
      await IntentLauncher.startActivityAsync("android.intent.action.VIEW", {
        data: uri,
        flags: 1,
      });
    } else {
      // –Ω–∞ iOS –ø—Ä–æ—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sharing, –æ–Ω –æ—Ç–∫—Ä–æ–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤—å—é–≤–µ—Ä—ã
      if (await Sharing.isAvailableAsync()) {
        await Sharing.shareAsync(uri);
      } else {
        Alert.alert("iOS", "–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
      }
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞:", err);
    Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª");
  }
};

// üëâ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–π–ª–æ–º¬ª ‚Äî —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram, WhatsApp –∏ —Ç.–¥.
export const shareFile = async (uri: string) => {
  try {
    const fileUri = await ensureFileUri(uri);

    if (await Sharing.isAvailableAsync()) {
      await Sharing.shareAsync(fileUri, { dialogTitle: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–π–ª–æ–º" });
    } else {
      Alert.alert("–û—à–∏–±–∫–∞", "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–π–ª–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∞—Ä–∏–Ω–≥–µ:", err);
    Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–π–ª–æ–º");
  }
};